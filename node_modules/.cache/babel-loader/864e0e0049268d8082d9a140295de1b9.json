{"ast":null,"code":"import axios from 'axios';\nconst instance = axios.create({\n  baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"e8349719-ae81-4d3f-972e-206990f2d8c6\"\n  }\n});\nexport const usersApi = {\n  getUsers(currentPage, pageSize = 10) {\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => {\n      return response.data;\n    });\n  },\n\n  getSubscription(id) {\n    return instance.post(`follow/${id}`).then(response => {\n      return response.data.resultCode;\n    });\n  },\n\n  deleteSubscription(id) {\n    return instance.delete(`follow/${id}`).then(response => {\n      return response.data.resultCode;\n    });\n  },\n\n  getUserProfile(userId) {\n    console.log(\"Obsolete API. Use profileAPI.getUserProfile instead\");\n    return profileAPI.getUserProfile(userId);\n  }\n\n};\nexport const profileAPI = {\n  getUserProfile(userId) {\n    return instance.get(`profile/${userId}`).then(response => {\n      return response.data;\n    });\n  },\n\n  getUserStatus(userId) {\n    return instance.get(`/profile/status/${userId}`).then(response => {\n      return response.data;\n    });\n  },\n\n  updateUserStatus(status) {\n    return instance.put(`/profile/status`, {\n      status: status\n    }).then(response => {\n      return response.data;\n    });\n  },\n\n  savePhoto(file) {\n    let formData = new FormData();\n    formData.append(\"image\", file);\n    const config = {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    };\n    return instance.put(`/profile/photo`, formData, config).then(response => {\n      return response;\n    });\n  },\n\n  setProfData(values) {\n    return instance.put(`/profile`, values).then(response => {\n      return response;\n    });\n  }\n\n};\nexport let ResultCodesEnum;\n\n(function (ResultCodesEnum) {\n  ResultCodesEnum[ResultCodesEnum[\"Success\"] = 0] = \"Success\";\n  ResultCodesEnum[ResultCodesEnum[\"Error\"] = 1] = \"Error\";\n})(ResultCodesEnum || (ResultCodesEnum = {}));\n\nexport let ResultCodeForCaptcha;\n\n(function (ResultCodeForCaptcha) {\n  ResultCodeForCaptcha[ResultCodeForCaptcha[\"CaptchaError\"] = 10] = \"CaptchaError\";\n})(ResultCodeForCaptcha || (ResultCodeForCaptcha = {}));\n\nexport const authAPI = {\n  getLoginData() {\n    return instance.get(\"auth/me\").then(response => {\n      return response.data;\n    });\n  }\n\n};\nexport const captchaAPI = {\n  getCaptchaUrl() {\n    return instance.get(\"/security/get-captcha-url\").then(response => {\n      return response;\n    });\n  }\n\n};\nexport const loginAPI = {\n  signInData(values) {\n    return instance.post(`auth/login`, {\n      email: values.login,\n      password: values.password,\n      rememberMe: values.remember_me[0],\n      captcha: values.captcha\n    }).then(response => {\n      return response.data;\n    });\n  },\n\n  signOutData() {\n    return instance.delete(`auth/login`).then(response => {\n      return response;\n    });\n  }\n\n};","map":{"version":3,"sources":["C:/Users/marii/OneDrive/Desktop/JavaScript/react_app/src/api/api.ts"],"names":["axios","instance","create","baseURL","withCredentials","headers","usersApi","getUsers","currentPage","pageSize","get","then","response","data","getSubscription","id","post","resultCode","deleteSubscription","delete","getUserProfile","userId","console","log","profileAPI","getUserStatus","updateUserStatus","status","put","savePhoto","file","formData","FormData","append","config","setProfData","values","ResultCodesEnum","ResultCodeForCaptcha","authAPI","getLoginData","captchaAPI","getCaptchaUrl","loginAPI","signInData","email","login","password","rememberMe","remember_me","captcha","signOutData"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {ValuesType} from \"../redux/authReducer\";\r\nimport {SetProfileDataType} from \"../redux/profileReducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"e8349719-ae81-4d3f-972e-206990f2d8c6\"\r\n    }\r\n})\r\n\r\ntype UsersGetResponseType = {\r\n    items: Array<{id: number,\r\n    name: string,\r\n    status: string,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    },\r\n    followed: boolean}> ,\r\n    totalCount: number,\r\n    error: string\r\n}\r\n\r\ntype GetSubscriptionResponseType = {\r\n    resultCode: ResultCodesEnum,\r\n    messages: Array<string>,\r\n    data: {}\r\n}\r\nexport const usersApi = {\r\n    getUsers(currentPage: number, pageSize = 10) {\r\n        return instance.get<UsersGetResponseType>(`users?page=${currentPage}&count=${pageSize}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    getSubscription(id: number) {\r\n        return instance.post<GetSubscriptionResponseType>(`follow/${id}`).then(response => {\r\n            return response.data.resultCode\r\n        })\r\n    },\r\n\r\n    deleteSubscription(id: number) {\r\n\r\n        return instance.delete(`follow/${id}`).then(response => {\r\n            return response.data.resultCode\r\n        })\r\n    },\r\n\r\n    getUserProfile(userId: number) {\r\n\r\n        console.log(\"Obsolete API. Use profileAPI.getUserProfile instead\");\r\n        return profileAPI.getUserProfile(userId);\r\n    }\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: number) {\r\n\r\n        return instance.get(`profile/${userId}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    getUserStatus(userId: number) {\r\n        return instance.get(`/profile/status/${userId}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    updateUserStatus(status: string) {\r\n        return instance.put(`/profile/status`, {status: status}).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    savePhoto(file: string) {\r\n        let formData = new FormData();\r\n        formData.append(\"image\", file);\r\n        const config = {\r\n            headers: {'content-type': 'multipart/form-data'}\r\n        }\r\n        return instance.put(`/profile/photo`, formData, config).then(response => {\r\n            return response;\r\n        })\r\n\r\n    },\r\n\r\n    setProfData(values:SetProfileDataType) {\r\n\r\n        return instance.put(`/profile`, values).then(response => {\r\n            return response\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error= 1\r\n}\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaError = 10\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: {id: number, email: string, login: string},\r\n    resultCode: ResultCodesEnum,\r\n    messages: Array<string>\r\n}\r\n\r\nexport const authAPI = {\r\n    getLoginData() {\r\n\r\n        return instance.get<MeResponseType>(\"auth/me\").then(response => {\r\n\r\n            return response.data\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport const captchaAPI = {\r\n    getCaptchaUrl() {\r\n\r\n        return instance.get(\"/security/get-captcha-url\").then(response => {\r\n\r\n            return response\r\n        });\r\n    }\r\n\r\n}\r\n\r\ntype SignInDataType = {\r\n    login: string,\r\n    password: string,\r\n    remember_me: any\r\n    captcha: null | string\r\n}\r\n\r\ntype SignInResponseType = {\r\n    resultCode: ResultCodeForCaptcha | ResultCodesEnum,\r\n    messages: Array<string>,\r\n    data: {userId: number}\r\n}\r\nexport const loginAPI = {\r\n    signInData(values: SignInDataType) {\r\n        return instance.post<SignInResponseType>(`auth/login`, {\r\n            email: values.login,\r\n            password: values.password,\r\n            rememberMe: values.remember_me[0],\r\n            captcha: values.captcha\r\n        }).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n\r\n    signOutData() {\r\n        return instance.delete(`auth/login`).then(response => {\r\n            return response\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}