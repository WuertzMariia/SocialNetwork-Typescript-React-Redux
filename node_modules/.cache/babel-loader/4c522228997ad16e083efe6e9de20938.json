{"ast":null,"code":"import { usersApi, profileAPI } from \"../api/api\";\nconst add_post = \"add_post\";\nconst SET_USER_PROFILE = \"setUserProfile\";\nconst TOGGLE_LOADING = \"page_is_loading\";\nconst UPDATE_USER_STATUS = \"user_status_update\";\nconst SET_USER_STATUS = \"set_user_status\";\nconst DELETE_POST = \"delete_post\";\nconst SET_PROFILE_PHOTO = \"set_new_profile_photo\";\nlet initialState = {\n  posts: [{\n    post: \"Hello\",\n    id: 1\n  }, {\n    post: \"how are you\",\n    id: 2\n  }, {\n    post: \"i am fine\",\n    id: 3\n  }, {\n    post: \"i am fine\",\n    id: 4\n  }, {\n    post: \"i am fine\",\n    id: 5\n  }],\n  profile: null,\n  isFetching: false,\n  status: 'My dream is to become a good Frontend Developer'\n};\n\nlet profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case add_post:\n      {\n        return { ...state,\n          posts: [...state.posts, {\n            post: action.new_post,\n            id: 6\n          }]\n        };\n      }\n      ;\n\n    case DELETE_POST:\n      {\n        return { ...state,\n          posts: [...state.posts.filter(item => {\n            return item.id != action.id;\n          })]\n        };\n      }\n\n    case SET_USER_PROFILE:\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n      ;\n\n    case SET_PROFILE_PHOTO:\n      {\n        debugger;\n        return { ...state,\n          profile: { ...state.profile,\n            photos: action.file\n          }\n        };\n      }\n\n    case TOGGLE_LOADING:\n      {\n        return { ...state,\n          isFetching: action.isLoading\n        };\n      }\n      ;\n\n    case UPDATE_USER_STATUS:\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n      ;\n\n    case SET_USER_STATUS:\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const actioncreatorAddPost = new_post => ({\n  type: add_post,\n  new_post\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const toggleIsLoading = isLoading => ({\n  type: TOGGLE_LOADING,\n  isLoading\n});\nexport const deletePost = id => ({\n  type: DELETE_POST,\n  id\n});\n\nconst updatingUserStatus = status => ({\n  type: UPDATE_USER_STATUS,\n  status\n});\n\nconst setUserStatus = status => ({\n  type: SET_USER_STATUS,\n  status\n});\n\nconst savePhotoSuccess = file => ({\n  type: SET_PROFILE_PHOTO,\n  file\n});\n\nexport const getCurrentUserStatus = userId => {\n  return async (dispatch, getState) => {\n    const response = await profileAPI.getUserStatus(userId);\n    dispatch(setUserStatus(response));\n  };\n};\nexport const getUserProfile = userId => {\n  return async (dispatch, getState) => {\n    dispatch(toggleIsLoading(true));\n    const response = await usersApi.getUserProfile(userId);\n    dispatch(toggleIsLoading(false));\n    dispatch(setUserProfile(response));\n  };\n};\nexport const updateUserStatus = status => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await profileAPI.updateUserStatus(status);\n\n      if (response.resultCode === 0) {\n        dispatch(updatingUserStatus(status));\n      }\n    } catch (error) {\n      alert(\"error\");\n    }\n  };\n};\nexport const addNewPost = values => {\n  return dispatch => {\n    dispatch(actioncreatorAddPost(values));\n  };\n};\nexport const savePhoto = file => {\n  return async (dispatch, getState) => {\n    const response = await profileAPI.savePhoto(file);\n\n    if (response.data.resultCode === 0) {\n      dispatch(savePhotoSuccess(response.data.data.photos));\n    }\n  };\n};\nexport const setProfileData = values => {\n  return async (dispatch, getState) => {\n    const userId = getState().auth.data.userId;\n    const response = await profileAPI.setProfData(values);\n\n    if (response.data.resultCode === 0) {\n      if (userId) {\n        dispatch(getUserProfile(userId));\n      }\n    }\n  };\n};\nexport default profileReducer;","map":{"version":3,"sources":["C:/Users/marii/OneDrive/Desktop/JavaScript/react_app/src/redux/profileReducer.ts"],"names":["usersApi","profileAPI","add_post","SET_USER_PROFILE","TOGGLE_LOADING","UPDATE_USER_STATUS","SET_USER_STATUS","DELETE_POST","SET_PROFILE_PHOTO","initialState","posts","post","id","profile","isFetching","status","profileReducer","state","action","type","new_post","filter","item","photos","file","isLoading","actioncreatorAddPost","setUserProfile","toggleIsLoading","deletePost","updatingUserStatus","setUserStatus","savePhotoSuccess","getCurrentUserStatus","userId","dispatch","getState","response","getUserStatus","getUserProfile","updateUserStatus","resultCode","error","alert","addNewPost","values","savePhoto","data","setProfileData","auth","setProfData"],"mappings":"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","sourcesContent":["import {usersApi, profileAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux_store\";\r\n\r\nconst add_post = \"add_post\";\r\nconst SET_USER_PROFILE = \"setUserProfile\";\r\nconst TOGGLE_LOADING = \"page_is_loading\";\r\nconst UPDATE_USER_STATUS = \"user_status_update\";\r\nconst SET_USER_STATUS = \"set_user_status\"\r\nconst DELETE_POST = \"delete_post\";\r\nconst SET_PROFILE_PHOTO = \"set_new_profile_photo\";\r\n\r\ntype ContactsType = {\r\n    github: string,\r\n    vk: string,\r\n    facebook: string,\r\n    instagram: string,\r\n    twitter: string,\r\n    website: string,\r\n    youtube: string,\r\n    mainLink: string\r\n}\r\ntype PhotosType = {\r\n    small: string,\r\n    large: string\r\n}\r\nexport type UsersType = {\r\n    id: number,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    contacts: ContactsType,\r\n    photos: PhotosType\r\n\r\n}\r\ntype PostType = {\r\n    post: string,\r\n    id: number\r\n}\r\ntype InitialStateType = {\r\n    posts: Array<PostType>,\r\n    profile: UsersType | null,\r\n    isFetching: boolean,\r\n    status: string | null\r\n}\r\nlet initialState: InitialStateType = {\r\n\r\n    posts: [\r\n        {post: \"Hello\", id: 1},\r\n        {post: \"how are you\", id: 2},\r\n        {post: \"i am fine\", id: 3},\r\n        {post: \"i am fine\", id: 4},\r\n        {post: \"i am fine\", id: 5}\r\n    ],\r\n    profile: null,\r\n    isFetching: false,\r\n    status: 'My dream is to become a good Frontend Developer'\r\n}\r\n\r\nlet profileReducer = (state = initialState, action:ActionType) => {\r\n    switch (action.type) {\r\n\r\n        case add_post : {\r\n\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {post: action.new_post, id: 6}]\r\n            }\r\n        }\r\n            ;\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts.filter(item => {\r\n                    return item.id != action.id\r\n                })]\r\n            }\r\n        }\r\n        case SET_USER_PROFILE : {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n            ;\r\n        case SET_PROFILE_PHOTO: {\r\n            debugger;\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.file}\r\n\r\n            }\r\n        }\r\n        case TOGGLE_LOADING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isLoading,\r\n            }\r\n        }\r\n            ;\r\n        case UPDATE_USER_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n            ;\r\n        case SET_USER_STATUS: {\r\n\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionType = AddPostACType |SetUserProfileType | ToggleIsLoadingType | DeletePostType | updatingUserStatus | SetUserStatusType | SavePhotoSuccessType\r\ntype AddPostACType ={\r\n    type: typeof add_post,\r\n    new_post: string\r\n}\r\nexport const actioncreatorAddPost = (new_post: string) :AddPostACType => ({type: add_post, new_post});\r\ntype SetUserProfileType = {\r\n    type: typeof SET_USER_PROFILE,\r\n    profile: UsersType\r\n}\r\nexport const setUserProfile = (profile: UsersType): SetUserProfileType => ({type: SET_USER_PROFILE, profile});\r\ntype ToggleIsLoadingType = {\r\n    type: typeof TOGGLE_LOADING,\r\n    isLoading: boolean\r\n}\r\nexport const toggleIsLoading = (isLoading: boolean): ToggleIsLoadingType => ({type: TOGGLE_LOADING, isLoading});\r\ntype DeletePostType = {\r\n    type: typeof DELETE_POST,\r\n    id: number\r\n}\r\nexport const deletePost = (id: number): DeletePostType => ({type: DELETE_POST, id});\r\ntype updatingUserStatus = {\r\n    type: typeof UPDATE_USER_STATUS,\r\n    status: string\r\n}\r\nconst updatingUserStatus = (status: string): updatingUserStatus => ({type: UPDATE_USER_STATUS, status});\r\ntype SetUserStatusType = {\r\n    type: typeof SET_USER_STATUS,\r\n    status: string\r\n}\r\nconst setUserStatus = (status: string): SetUserStatusType => ({type: SET_USER_STATUS, status});\r\ntype SavePhotoSuccessType = {\r\n    type: typeof SET_PROFILE_PHOTO,\r\n    file: string\r\n}\r\nconst savePhotoSuccess = (file: string):SavePhotoSuccessType => ({type: SET_PROFILE_PHOTO, file})\r\n\r\ntype ThunksType = ThunkAction<Promise<void>, AppStateType, any, ActionType>\r\nexport const getCurrentUserStatus = (userId: number): ThunksType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await profileAPI.getUserStatus(userId);\r\n        dispatch(setUserStatus(response));\r\n\r\n    }\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunksType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(toggleIsLoading(true));\r\n        const response = await usersApi.getUserProfile(userId)\r\n        dispatch(toggleIsLoading(false));\r\n        dispatch(setUserProfile(response));\r\n\r\n    }\r\n}\r\n\r\nexport const updateUserStatus = (status:string): ThunksType => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            const response = await profileAPI.updateUserStatus(status)\r\n            if (response.resultCode === 0) {\r\n                dispatch(updatingUserStatus(status));\r\n            }\r\n        }\r\n        catch (error) {\r\n\r\n            alert (\"error\"); \r\n        }\r\n    }\r\n}\r\n\r\ntype ThunksTypeShort = ThunkAction<any, AppStateType, any, ActionType>\r\nexport const addNewPost = (values: string): ThunksTypeShort => {\r\n    return (dispatch) => {\r\n        dispatch(actioncreatorAddPost(values));\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: string): ThunksType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await profileAPI.savePhoto(file);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(savePhotoSuccess(response.data.data.photos));\r\n        }\r\n    }\r\n}\r\n\r\nexport const setProfileData = (values: any): ThunksType => {\r\n    return async (dispatch, getState) => {\r\n        const userId= getState().auth.data.userId;\r\n        const response = await profileAPI.setProfData(values);\r\n        if (response.data.resultCode === 0) {\r\nif(userId){\r\n    dispatch(getUserProfile(userId));\r\n}\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default profileReducer; "]},"metadata":{},"sourceType":"module"}