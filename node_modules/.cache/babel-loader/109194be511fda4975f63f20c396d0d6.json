{"ast":null,"code":"import { usersApi } from \"../api/api\";\nconst FOLLOW = \"follow\";\nconst UNFOLLOW = \"unfollow\";\nconst SETUSERS = \"set_users\";\nconst SETCURRENTPAGE = \"set_current_page\";\nconst SETTOTALPAGESCOUNT = \"setTotalUsersCount\";\nconst TOGGLEISLOADING = \"toggle_is_loading\";\nconst SUBSCRIPTIONPROCESSED = \"while_subscription_is_being_processed\";\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  //before axios.get\n  currentPage: 1,\n  isLoading: false,\n  subscriptionProcessed: []\n};\n\nlet usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      {\n        return { ...state,\n          users: state.users.map(u => {\n            if (u.id === action.userId) {\n              return { ...u,\n                followed: true\n              };\n            }\n\n            return u;\n          })\n        };\n      }\n      ;\n\n    case UNFOLLOW:\n      {\n        return { ...state,\n          users: state.users.map(u => {\n            if (u.id === action.userId) {\n              return { ...u,\n                followed: false\n              };\n            }\n\n            return u;\n          })\n        };\n      }\n      ;\n\n    case SETCURRENTPAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case SETUSERS:\n      return { ...state,\n        users: action.users\n      };\n\n    case SETTOTALPAGESCOUNT:\n      return { ...state,\n        totalUsersCount: action.totalUsersCount\n      };\n\n    case TOGGLEISLOADING:\n      return { ...state,\n        isLoading: action.isloading\n      };\n\n    case SUBSCRIPTIONPROCESSED:\n      {\n        return { ...state,\n          subscriptionProcessed: action.being_processed ? [...state.subscriptionProcessed, action.id] : [...state.subscriptionProcessed.filter(id => id !== action.id)]\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst follow = userId => {\n  return {\n    type: FOLLOW,\n    userId\n  };\n};\n\nconst unfollow = userId => ({\n  type: UNFOLLOW,\n  userId\n});\n\nconst setUsers = users => ({\n  type: SETUSERS,\n  users\n});\n\nconst toggleIsLoading = isloading => ({\n  type: TOGGLEISLOADING,\n  isloading\n});\n\nconst subscriptionIsBeingProcessed = (being_processed, id) => ({\n  type: SUBSCRIPTIONPROCESSED,\n  being_processed,\n  id\n});\n\nexport const setCurrentPageUsers = currentPage => ({\n  type: SETCURRENTPAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SETTOTALPAGESCOUNT,\n  totalUsersCount\n});\nexport const getUsers = (currentPage, pageSize) => {\n  return async dispatch => {\n    dispatch(toggleIsLoading(true));\n    let response = await usersApi.getUsers(currentPage, pageSize);\n    debugger;\n    dispatch(toggleIsLoading(false));\n    dispatch(setUsers(response.items));\n    dispatch(setCurrentPageUsers(currentPage));\n    dispatch(setTotalUsersCount(response.totalCount));\n  };\n};\nexport const unsubscribe = userID => {\n  return async dispatch => {\n    dispatch(subscriptionIsBeingProcessed(true, userID));\n\n    try {\n      let response = await usersApi.deleteSubscription(userID);\n\n      if (response === 0) {\n        dispatch(unfollow(userID));\n      }\n    } catch (error) {\n      alert(\"error\");\n    }\n\n    dispatch(subscriptionIsBeingProcessed(false, userID));\n  };\n};\nexport const subscribe = userID => {\n  return async dispatch => {\n    dispatch(subscriptionIsBeingProcessed(true, userID));\n\n    try {\n      let response = await usersApi.getSubscription(userID);\n\n      if (response === 0) {\n        dispatch(follow(userID));\n      }\n    } catch (error) {\n      alert(\"error\");\n    }\n\n    dispatch(subscriptionIsBeingProcessed(false, userID));\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["C:/Users/marii/OneDrive/Desktop/JavaScript/react_app/src/redux/usersReducer.ts"],"names":["usersApi","FOLLOW","UNFOLLOW","SETUSERS","SETCURRENTPAGE","SETTOTALPAGESCOUNT","TOGGLEISLOADING","SUBSCRIPTIONPROCESSED","initialState","users","pageSize","totalUsersCount","currentPage","isLoading","subscriptionProcessed","usersReducer","state","action","type","map","u","id","userId","followed","isloading","being_processed","filter","follow","unfollow","setUsers","toggleIsLoading","subscriptionIsBeingProcessed","setCurrentPageUsers","setTotalUsersCount","getUsers","dispatch","response","items","totalCount","unsubscribe","userID","deleteSubscription","error","alert","subscribe","getSubscription"],"mappings":"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","sourcesContent":["import {usersApi} from \"../api/api\";\r\n\r\nconst FOLLOW = \"follow\";\r\nconst UNFOLLOW = \"unfollow\";\r\nconst SETUSERS = \"set_users\";\r\nconst SETCURRENTPAGE = \"set_current_page\";\r\nconst SETTOTALPAGESCOUNT = \"setTotalUsersCount\";\r\nconst TOGGLEISLOADING = \"toggle_is_loading\";\r\nconst SUBSCRIPTIONPROCESSED = \"while_subscription_is_being_processed\";\r\ntype PhotosType = {\r\n    small: string | null,\r\n    large: string | null\r\n}\r\n\r\nexport type UsersShortType = {\r\n    name: string,\r\n    id: number,\r\n    photos: PhotosType,\r\n    status: string | null,\r\n    followed: boolean\r\n}\r\ntype InitialStateType = {\r\n    users: Array<UsersShortType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isLoading: boolean,\r\n    subscriptionProcessed: Array<number>\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0, //before axios.get\r\n    currentPage: 1,\r\n    isLoading: false,\r\n    subscriptionProcessed: []\r\n}\r\n\r\n\r\nlet usersReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        }\r\n            ;\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        }\r\n            ;\r\n        case SETCURRENTPAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        case SETUSERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            };\r\n        case SETTOTALPAGESCOUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            };\r\n        case TOGGLEISLOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: action.isloading\r\n            };\r\n        case SUBSCRIPTIONPROCESSED: {\r\n\r\n            return {\r\n                ...state,\r\n                subscriptionProcessed: action.being_processed ?\r\n                    [...state.subscriptionProcessed, action.id] :\r\n                    [...state.subscriptionProcessed.filter(id => id !== action.id)]\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionType = FollowType | UnfollowType | SetUsersType | ToggleIsLoadingType | subscriptionIsBeingProcessedType |\r\n    SetCurrentPageUsersType |SetTotalUsersCountType;\r\ntype FollowType = {\r\n    type: typeof FOLLOW,\r\n    userId: number\r\n}\r\nconst follow = (userId: number): FollowType => {\r\n    return ({type: FOLLOW, userId})\r\n};\r\ntype UnfollowType = {\r\n    type: typeof UNFOLLOW,\r\n    userId: number\r\n}\r\nconst unfollow = (userId: number): UnfollowType => ({type: UNFOLLOW, userId});\r\n\r\ntype SetUsersType = {\r\n    type: typeof SETUSERS,\r\n    users: Array<UsersShortType>\r\n}\r\nconst setUsers = (users: Array<UsersShortType>): SetUsersType => ({type: SETUSERS, users});\r\n\r\ntype ToggleIsLoadingType = {\r\n    type: typeof TOGGLEISLOADING,\r\n    isloading: boolean\r\n}\r\nconst toggleIsLoading = (isloading: boolean): ToggleIsLoadingType => ({type: TOGGLEISLOADING, isloading});\r\n\r\ntype subscriptionIsBeingProcessedType = {\r\n    type: typeof SUBSCRIPTIONPROCESSED,\r\n    being_processed: boolean,\r\n    id: number\r\n}\r\nconst subscriptionIsBeingProcessed = (being_processed: boolean, id: number): subscriptionIsBeingProcessedType => ({\r\n    type: SUBSCRIPTIONPROCESSED,\r\n    being_processed,\r\n    id\r\n});\r\ntype SetCurrentPageUsersType = {\r\n    type: typeof SETCURRENTPAGE,\r\n    currentPage: number\r\n}\r\nexport const setCurrentPageUsers = (currentPage: number): SetCurrentPageUsersType => ({type: SETCURRENTPAGE, currentPage});\r\ntype SetTotalUsersCountType = {\r\n    type: typeof SETTOTALPAGESCOUNT,\r\n    totalUsersCount: number\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountType => ({type: SETTOTALPAGESCOUNT, totalUsersCount});\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return async (dispatch: any) => {\r\n        dispatch(toggleIsLoading(true));\r\n\r\n        let response = await usersApi.getUsers(currentPage, pageSize)\r\n        debugger;\r\n        dispatch(toggleIsLoading(false));\r\n        dispatch(setUsers(response.items));\r\n        dispatch(setCurrentPageUsers(currentPage));\r\n        dispatch(setTotalUsersCount(response.totalCount));\r\n\r\n    }\r\n}\r\n\r\nexport const unsubscribe = (userID: number) => {\r\n    return async (dispatch: any) => {\r\n        dispatch(subscriptionIsBeingProcessed(true, userID));\r\n        try {\r\n            let response = await usersApi.deleteSubscription(userID)\r\n            if (response === 0) {\r\n                dispatch(unfollow(userID));\r\n            }\r\n        } catch (error) {\r\n            alert(\"error\");\r\n        }\r\n        dispatch(subscriptionIsBeingProcessed(false, userID));\r\n    }\r\n}\r\n\r\nexport const subscribe = (userID: number) => {\r\n    return async (dispatch: any) => {\r\n        dispatch(subscriptionIsBeingProcessed(true, userID));\r\n        try {\r\n            let response = await usersApi.getSubscription(userID)\r\n            if (response === 0) {\r\n\r\n                dispatch(follow(userID));\r\n            }\r\n        } catch (error) {\r\n            alert(\"error\");\r\n        }\r\n        dispatch(subscriptionIsBeingProcessed(false, userID));\r\n    }\r\n}\r\n\r\nexport default usersReducer; "]},"metadata":{},"sourceType":"module"}