{"ast":null,"code":"import { authAPI, captchaAPI, loginAPI } from \"../api/api\";\nconst SETUSERSTATE = \"soc_network_auth_set_user_auth_state\";\nconst TOGGLELOGINLOADING = \"soc_network_auth_toggle_is_loading_login\";\nconst SIGN_ME_IN = \"soc_network_auth_signing_in\";\nconst LOGIN_FAILED = \"soc_network_auth_log_fail\";\nconst GET_CAPTCHA_URL_SUCCESS = \"soc_network_auth_received_captcha_url\";\nlet initialState = {\n  data: {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n  },\n  isFetching: false,\n  login_failed: null,\n  captchaURL: null // if null - captcha not required\n\n};\n\nlet authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SETUSERSTATE:\n      {\n        return { ...state,\n          data: { ...action.payload\n          },\n          login_failed: action.login_failed,\n          captchaURL: action.captchaURL\n        };\n      }\n      ;\n\n    case TOGGLELOGINLOADING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n      ;\n\n    case SIGN_ME_IN:\n      {\n        return { ...state,\n          data: { ...state.data,\n            userId: action.userId\n          }\n        };\n      }\n      ;\n\n    case LOGIN_FAILED:\n      {\n        return { ...state,\n          login_failed: action.login_failed\n        };\n      }\n      ;\n\n    case GET_CAPTCHA_URL_SUCCESS:\n      {\n        return { ...state,\n          captchaURL: action.captchaURL\n        };\n      }\n      ;\n\n    default:\n      return state;\n  }\n};\n\nconst setAuthUserData = (userId, email, login, isAuth, login_failed, captchaURL) => ({\n  type: SETUSERSTATE,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth,\n    login_failed,\n    captchaURL\n  }\n});\n\nconst toggleIsLoadingLogin = isFetching => ({\n  type: TOGGLELOGINLOADING,\n  isFetching\n});\n\nconst toggle_failed_login = login_failed => ({\n  type: LOGIN_FAILED,\n  login_failed\n});\n\nconst setCaptchaURL = captchaURL => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  captchaURL\n}); // Check if signed in\n\n\nexport const singInProcessCheck = () => {\n  return async dispatch => {\n    dispatch(toggleIsLoadingLogin(true));\n    let response = await authAPI.getLoginData();\n    dispatch(toggleIsLoadingLogin(false));\n\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login,\n        captchaURL = null\n      } = response.data.data;\n      dispatch(setAuthUserData(id, email, login, true, false, captchaURL));\n    } else console.log(\"error no login\");\n  };\n}; // sign me in\n\nexport const singInLogin = values => {\n  return async dispatch => {\n    if (!values.remember_me) {\n      values = { ...values,\n        remember_me: false\n      };\n    }\n\n    let response = await loginAPI.signInData(values);\n\n    if (response.data.resultCode === 0) {\n      dispatch(singInProcessCheck());\n    } else {\n      if (response.data.resultCode === 10) {\n        dispatch(getCaptchaURL());\n      }\n\n      dispatch(toggle_failed_login(true));\n    }\n  };\n};\nexport const singOutLogin = () => {\n  return async dispatch => {\n    let response = await loginAPI.signOutData();\n\n    if (response.data.resultCode === 0) {\n      // dispatch(setLogin(response.data.userId)); \n      dispatch(setAuthUserData(null, null, null, false, null, null));\n    } else {\n      console.log(\"no sign out\");\n    }\n  };\n};\nexport const getCaptchaURL = () => {\n  return async dispatch => {\n    const response = await captchaAPI.getCaptchaUrl();\n    const captchaUrl = response.data.url;\n    dispatch(setCaptchaURL(captchaUrl));\n  };\n};\nexport default authReducer;","map":{"version":3,"sources":["C:/Users/marii/OneDrive/Desktop/JavaScript/react_app/src/redux/authReducer.ts"],"names":["authAPI","captchaAPI","loginAPI","SETUSERSTATE","TOGGLELOGINLOADING","SIGN_ME_IN","LOGIN_FAILED","GET_CAPTCHA_URL_SUCCESS","initialState","data","userId","email","login","isAuth","isFetching","login_failed","captchaURL","authReducer","state","action","type","payload","setAuthUserData","toggleIsLoadingLogin","toggle_failed_login","setCaptchaURL","singInProcessCheck","dispatch","response","getLoginData","resultCode","id","console","log","singInLogin","values","remember_me","signInData","getCaptchaURL","singOutLogin","signOutData","getCaptchaUrl","captchaUrl","url"],"mappings":"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","sourcesContent":["import {authAPI, captchaAPI, loginAPI} from \"../api/api\";\r\n\r\n\r\nconst SETUSERSTATE = \"soc_network_auth_set_user_auth_state\";\r\nconst TOGGLELOGINLOADING = \"soc_network_auth_toggle_is_loading_login\";\r\nconst SIGN_ME_IN = \"soc_network_auth_signing_in\";\r\nconst LOGIN_FAILED = \"soc_network_auth_log_fail\";\r\nconst GET_CAPTCHA_URL_SUCCESS = \"soc_network_auth_received_captcha_url\";\r\n\r\ntype DataType = {\r\n    userId: null,\r\n    email: null | string,\r\n    login: null | string,\r\n    isAuth: boolean\r\n\r\n}\r\n\r\ntype InitialStateType = {\r\n    data: DataType,\r\n    isFetching: boolean,\r\n    login_failed: boolean | null,\r\n    captchaURL: null | string\r\n\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    data: {\r\n        userId: null,\r\n        email: null,\r\n        login: null,\r\n        isAuth: false\r\n    },\r\n    isFetching: false,\r\n    login_failed: null,\r\n    captchaURL: null // if null - captcha not required\r\n}\r\n\r\n\r\nlet authReducer = (state = initialState, action: any): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case SETUSERSTATE: {\r\n\r\n            return {\r\n                ...state,\r\n                data: {...action.payload},\r\n                login_failed: action.login_failed,\r\n                captchaURL: action.captchaURL\r\n            }\r\n        }\r\n            ;\r\n        case TOGGLELOGINLOADING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n            ;\r\n        case SIGN_ME_IN: {\r\n            return {\r\n                ...state,\r\n                data: {...state.data, userId: action.userId}\r\n            }\r\n        }\r\n            ;\r\n        case LOGIN_FAILED : {\r\n            return {\r\n                ...state,\r\n                login_failed: action.login_failed\r\n            }\r\n        }\r\n            ;\r\n        case GET_CAPTCHA_URL_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                captchaURL: action.captchaURL\r\n            }\r\n        }\r\n            ;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype SetAuthUserDataPayloadType = {\r\n    userId: number | null, email: string | null, login: string | null, isAuth: boolean, login_failed: boolean |null, captchaURL: string | null\r\n}\r\ntype SetAuthUserDataType = {\r\n    type: typeof SETUSERSTATE,\r\n    payload: SetAuthUserDataPayloadType\r\n}\r\n\r\nconst setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean, login_failed: boolean |null, captchaURL: string|null): SetAuthUserDataType => ({\r\n    type: SETUSERSTATE,\r\n    payload: {userId, email, login, isAuth, login_failed, captchaURL}\r\n});\r\ntype ToggleIsLoadingLoginType = {\r\n    type: typeof TOGGLELOGINLOADING,\r\n    isFetching: boolean\r\n}\r\nconst toggleIsLoadingLogin = (isFetching: boolean): ToggleIsLoadingLoginType => ({type: TOGGLELOGINLOADING, isFetching});\r\n\r\ntype ToggleFailedLoginType = {\r\n    type: typeof LOGIN_FAILED,\r\n    login_failed: boolean\r\n}\r\n\r\nconst toggle_failed_login = (login_failed: boolean): ToggleFailedLoginType => ({type: LOGIN_FAILED, login_failed});\r\n\r\ntype SetCaptchaUrlType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS,\r\n    captchaURL: string\r\n}\r\nconst setCaptchaURL = (captchaURL: string): SetCaptchaUrlType => ({type: GET_CAPTCHA_URL_SUCCESS, captchaURL});\r\n\r\n// Check if signed in\r\nexport const singInProcessCheck = () => {\r\n    return async (dispatch: any) => {\r\n        dispatch(toggleIsLoadingLogin(true));\r\n        let response = await authAPI.getLoginData()\r\n        dispatch(toggleIsLoadingLogin(false));\r\n        if (response.data.resultCode === 0) {\r\n            let {id, email, login, captchaURL = null} = response.data.data;\r\n            dispatch(setAuthUserData(id, email, login, true, false, captchaURL));\r\n        } else console.log(\"error no login\")\r\n    }\r\n\r\n};\r\n// sign me in\r\nexport const singInLogin = (values: any) => {\r\n    return async (dispatch: any) => {\r\n        if (!values.remember_me) {\r\n            values = {...values, remember_me: false};\r\n        }\r\n        let response = await loginAPI.signInData(values)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(singInProcessCheck());\r\n        } else {\r\n            if (response.data.resultCode === 10) {\r\n                dispatch(getCaptchaURL());\r\n            }\r\n            dispatch(toggle_failed_login(true));\r\n        }\r\n    }\r\n};\r\n\r\nexport const singOutLogin = () => {\r\n    return async (dispatch : any) => {\r\n        let response = await loginAPI.signOutData();\r\n        if (response.data.resultCode === 0) {\r\n            // dispatch(setLogin(response.data.userId)); \r\n            dispatch(setAuthUserData(null, null, null, false, null, null));\r\n        } else {\r\n            console.log(\"no sign out\")\r\n        }\r\n    }\r\n};\r\n\r\nexport const getCaptchaURL = () => {\r\n    return async (dispatch : any) => {\r\n        const response = await captchaAPI.getCaptchaUrl();\r\n        const captchaUrl = response.data.url;\r\n        dispatch(setCaptchaURL(captchaUrl));\r\n    }\r\n}\r\n\r\nexport default authReducer; "]},"metadata":{},"sourceType":"module"}