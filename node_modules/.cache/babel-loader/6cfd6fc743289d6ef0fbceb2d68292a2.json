{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marii\\\\OneDrive\\\\Desktop\\\\JavaScript\\\\react_app\\\\src\\\\components\\\\Users\\\\Users_Container.tsx\";\nimport React from 'react';\nimport { getUsers, subscribe, unsubscribe, setCurrentPageUsers, setTotalUsersCount } from \"../../redux/usersReducer\";\nimport Users from './Users';\nimport Preloader from '../Preloader/Preloader';\nimport { compose } from 'redux';\nimport { withAuthRedirectComponent } from '../Redirect/withAuthRedirectComponent';\nimport { pageLoading, requestPage, requestUsers, subscriptionConfirm, totUsersCount, usersPageSize } from \"../../redux/selectors\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UsersApiComponent extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onBtnPageClick = p => {\n      this.props.getUsers(p, this.props.pageSize);\n    };\n  }\n\n  componentDidMount() {\n    this.props.getUsers(this.props.currentPage, this.props.pageSize);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.props.isLoading ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 42\n        }, this) : /*#__PURE__*/_jsxDEV(Users, {\n          usersPageUsers: this.props.usersPageUsers,\n          pageSize: this.props.pageSize,\n          totalUsersCount: this.props.totalUsersCount,\n          currentPage: this.props.currentPage,\n          subscribe: this.props.subscribe,\n          unsubscribe: this.props.unsubscribe,\n          onBtnPageClick: this.onBtnPageClick,\n          setCurrentPageUsers: this.props.setCurrentPageUsers,\n          setTotalUsersCount: this.props.setTotalUsersCount,\n          subscriptionProcessed: this.props.subscriptionProcessed\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    usersPageUsers: requestUsers(state),\n    pageSize: usersPageSize(state),\n    totalUsersCount: totUsersCount(state),\n    currentPage: requestPage(state),\n    isLoading: pageLoading(state),\n    subscriptionProcessed: subscriptionConfirm(state)\n  };\n}; // let mapDispatchToProps = (dispatch) => {\n//     return {\n//         follow: (userID) => { dispatch(followAC(userID)); },\n//         unfollow: (userID) => { dispatch(unfollowAC(userID)) },\n//         setUsers: (users) => { dispatch(setUsersAC(users)) },\n//         setCurrentPageUsers: (pageNumber) => { dispatch(setCurrentPageAC(pageNumber)) },\n//         setTotalUsersCount: (totalcount) => { dispatch(setTotalUsersCountAC(totalcount)) },\n//         toggleIsLoading: (isloading) => {dispatch(isLoadingAC(isloading))}\n//     }\n// }\n\n\nexport default compose(connect(mapStateToProps, {\n  getUsers,\n  subscribe,\n  unsubscribe,\n  setCurrentPageUsers,\n  setTotalUsersCount\n}), withAuthRedirectComponent)(UsersApiComponent);","map":{"version":3,"sources":["C:/Users/marii/OneDrive/Desktop/JavaScript/react_app/src/components/Users/Users_Container.tsx"],"names":["React","getUsers","subscribe","unsubscribe","setCurrentPageUsers","setTotalUsersCount","Users","Preloader","compose","withAuthRedirectComponent","pageLoading","requestPage","requestUsers","subscriptionConfirm","totUsersCount","usersPageSize","connect","UsersApiComponent","Component","onBtnPageClick","p","props","pageSize","componentDidMount","currentPage","render","isLoading","usersPageUsers","totalUsersCount","subscriptionProcessed","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,QADJ,EAEIC,SAFJ,EAGIC,WAHJ,EAIIC,mBAJJ,EAKIC,kBALJ,QAOO,0BAPP;AAQA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,yBAAT,QAA0C,uCAA1C;AACA,SACIC,WADJ,EAEIC,WAFJ,EAGIC,YAHJ,EAIGC,mBAJH,EAKIC,aALJ,EAMIC,aANJ,QAOO,uBAPP;AAQA,SAAQC,OAAR,QAAsB,aAAtB;;;;AAiBA,MAAMC,iBAAN,SAAgCjB,KAAK,CAACkB,SAAtC,CAA2D;AAAA;AAAA;;AAAA,SAKvDC,cALuD,GAKrCC,CAAD,IAAe;AAC5B,WAAKC,KAAL,CAAWpB,QAAX,CAAoBmB,CAApB,EAAuB,KAAKC,KAAL,CAAWC,QAAlC;AACH,KAPsD;AAAA;;AACvDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKF,KAAL,CAAWpB,QAAX,CAAoB,KAAKoB,KAAL,CAAWG,WAA/B,EAA4C,KAAKH,KAAL,CAAWC,QAAvD;AAEH;;AAKDG,EAAAA,MAAM,GAAG;AACL,wBAAO;AAAA,6BACH;AAAA,kBAAM,KAAKJ,KAAL,CAAWK,SAAX,gBAAuB,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,gBAAvB,gBACN,QAAC,KAAD;AACI,UAAA,cAAc,EAAE,KAAKL,KAAL,CAAWM,cAD/B;AAEA,UAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWC,QAFrB;AAGA,UAAA,eAAe,EAAE,KAAKD,KAAL,CAAWO,eAH5B;AAIA,UAAA,WAAW,EAAE,KAAKP,KAAL,CAAWG,WAJxB;AAKA,UAAA,SAAS,EAAE,KAAKH,KAAL,CAAWnB,SALtB;AAMA,UAAA,WAAW,EAAE,KAAKmB,KAAL,CAAWlB,WANxB;AAOA,UAAA,cAAc,EAAE,KAAKgB,cAPrB;AAQA,UAAA,mBAAmB,EAAE,KAAKE,KAAL,CAAWjB,mBARhC;AASA,UAAA,kBAAkB,EAAE,KAAKiB,KAAL,CAAWhB,kBAT/B;AAUA,UAAA,qBAAqB,EAAE,KAAKgB,KAAL,CAAWQ;AAVlC;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADG,qBAAP;AAgBH;;AA1BsD;;AA4B3D,IAAIC,eAAe,GAAIC,KAAD,IAAqB;AACvC,SAAO;AACHJ,IAAAA,cAAc,EAAEf,YAAY,CAACmB,KAAD,CADzB;AAEHT,IAAAA,QAAQ,EAAEP,aAAa,CAACgB,KAAD,CAFpB;AAGHH,IAAAA,eAAe,EAAEd,aAAa,CAACiB,KAAD,CAH3B;AAIHP,IAAAA,WAAW,EAAEb,WAAW,CAACoB,KAAD,CAJrB;AAKHL,IAAAA,SAAS,EAAEhB,WAAW,CAACqB,KAAD,CALnB;AAMHF,IAAAA,qBAAqB,EAAGhB,mBAAmB,CAACkB,KAAD;AANxC,GAAP;AAQH,CATD,C,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAevB,OAAO,CAAEQ,OAAO,CAACc,eAAD,EAAkB;AAC7C7B,EAAAA,QAD6C;AAE7CC,EAAAA,SAF6C;AAG7CC,EAAAA,WAH6C;AAI7CC,EAAAA,mBAJ6C;AAIxBC,EAAAA;AAJwB,CAAlB,CAAT,EAKlBI,yBALkB,CAAP,CAKgBQ,iBALhB,CAAf","sourcesContent":["import React from 'react';\r\n\r\nimport {\r\n    getUsers,\r\n    subscribe,\r\n    unsubscribe,\r\n    setCurrentPageUsers,\r\n    setTotalUsersCount,\r\n    UsersShortType\r\n} from \"../../redux/usersReducer\";\r\nimport Users from './Users';\r\nimport Preloader from '../Preloader/Preloader';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirectComponent } from '../Redirect/withAuthRedirectComponent';\r\nimport {\r\n    pageLoading,\r\n    requestPage,\r\n    requestUsers,\r\n   subscriptionConfirm,\r\n    totUsersCount,\r\n    usersPageSize\r\n} from \"../../redux/selectors\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppState} from \"../../redux/redux_store\";\r\n\r\ntype PropsType = {\r\n    getUsers: (currentPage: number, pageSize: number) => void,\r\n    isLoading: boolean,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    usersPageUsers: Array<UsersShortType>,\r\n    totalUsersCount: number,\r\n    subscribe: () => void,\r\n    unsubscribe: () => void,\r\n    setCurrentPageUsers: () => void,\r\n    setTotalUsersCount: () => void,\r\n    subscriptionProcessed: Array<number>\r\n}\r\n\r\nclass UsersApiComponent extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize); \r\n\r\n    }\r\n    onBtnPageClick = (p: number) => {\r\n        this.props.getUsers(p, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            <div>{this.props.isLoading ? <Preloader /> : \r\n            <Users\r\n                usersPageUsers={this.props.usersPageUsers}\r\n            pageSize={this.props.pageSize} \r\n            totalUsersCount={this.props.totalUsersCount} \r\n            currentPage={this.props.currentPage} \r\n            subscribe={this.props.subscribe}\r\n            unsubscribe={this.props.unsubscribe}\r\n            onBtnPageClick={this.onBtnPageClick} \r\n            setCurrentPageUsers={this.props.setCurrentPageUsers}\r\n            setTotalUsersCount={this.props.setTotalUsersCount}\r\n            subscriptionProcessed={this.props.subscriptionProcessed}\r\n            />}\r\n            </div>\r\n        </>\r\n    }\r\n}\r\nlet mapStateToProps = (state: AppState) => {\r\n    return {\r\n        usersPageUsers: requestUsers(state),\r\n        pageSize: usersPageSize(state),\r\n        totalUsersCount: totUsersCount(state),\r\n        currentPage: requestPage(state),\r\n        isLoading: pageLoading(state),\r\n        subscriptionProcessed : subscriptionConfirm(state)\r\n    }\r\n}\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         follow: (userID) => { dispatch(followAC(userID)); },\r\n//         unfollow: (userID) => { dispatch(unfollowAC(userID)) },\r\n//         setUsers: (users) => { dispatch(setUsersAC(users)) },\r\n//         setCurrentPageUsers: (pageNumber) => { dispatch(setCurrentPageAC(pageNumber)) },\r\n//         setTotalUsersCount: (totalcount) => { dispatch(setTotalUsersCountAC(totalcount)) },\r\n//         toggleIsLoading: (isloading) => {dispatch(isLoadingAC(isloading))}\r\n//     }\r\n// }\r\n\r\n\r\nexport default compose( connect(mapStateToProps, {\r\n    getUsers,\r\n    subscribe,\r\n    unsubscribe,\r\n    setCurrentPageUsers, setTotalUsersCount\r\n}), withAuthRedirectComponent)(UsersApiComponent);\r\n"]},"metadata":{},"sourceType":"module"}